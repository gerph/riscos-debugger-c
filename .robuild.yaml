%YAML 1.0
---

# Example .robuild.yml file

# Source is optional (NYI), and should be a URL to source the content from
#source: <url>

# Defines a list of jobs which will be performed.
# Only 1 job will currently be executed.
jobs:
  build:
    # Env defines system variables which will be used within the environment.
    # Multiple variables may be assigned.
    env:
      "Sys$Environment": ROBuild
      "BUILD32": 1

    # Directory to change to before running script
    #dir: <working directory>

    # Commands which should be executed to perform the build.
    # The build will terminate if any command returns a non-0 return code or an error.
    script:
      - echo *** Update C path with the libs we downloaded
      - Set C$Path @.Lib.,<C$Path>
      - echo C path is <C$Path>

      - echo *** Build the FPATest tool
      - amu -f MakefileFPATest

      - echo *** Run the FPATest
      - /aif32.FPATest

      - echo *** Build the DisFile tool
      - amu -f MakefileDisFile

      - echo *** Run the DisFile tool
      - /aif32.DisFile hello_world

      - echo *** Build the module
      - amu -f MakefileModule

      - echo *** Export the built versions
      - cdir Artifacts
      - copy rm32.Debugger Artifacts.Debugger ~CV~RF
      - copy aif32.DisFile Artifacts.DisFile ~CV~RF

      - echo *** Load the module to check that it works
      - RMLoad rm32.Debugger

      - echo *** Exercise *Memory
      - Memory 8000 +16

      - echo *** Exercise *MemoryI
      - MemoryI 8000 +16

      - echo *** Exercise *DumpI
      - DumpI hello_world

      - echo *** Simple smoketests complete

    # Outputs from the build are defined in artifacts
    # These are a list of artifacts to report directories or files.
    # Only a single item is currently supported.
    artifacts:
      # Each element of the artifacts should have a path key, which gives the file or
      # directory to return.
      - path: Artifacts
