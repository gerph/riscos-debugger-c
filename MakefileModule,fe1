#!/usr/bin/env riscos-amu -f
# Makefile for Debugger
#

#
# Program specific options:
#
COMPONENT  = Debugger

# Specifies additional targets for startup
INITTARGET = inittarget

# Specifies additional targets for clean
CLEANTARGET = cleantarget

# Files to export as part of export_hdr or export_libs
# To export to the standard C: path, you might use an export like:
#   ${EXP_C_H}.${COMPONENT}SWIs
# To export to the library in a subdirectory, use an export like:
#   ${EXP_LIB}.${COMPONENT}.h.myheader
EXPORTS    = ${EXP_C_H}.${COMPONENT}SWIs

# Resources you want to be exported as part of the 'resources' phase of the build
#RESOURCES  = ${RESDIR}.${COMPONENT}.Messages

# Comma-separated list of paths to use for includes, such as:
#	<Lib$Dir>.LibName.
INCLUDES   = C:DARM,C:Armadillo

# Space separated list of libraries to link against.
# (${CLIB} is implicit, unless NOCLIB = yes)
LIBS       = C:DARM.o.libDARM C:Armadillo.o.libArmadillo

# Space separated list of defines to set, eg -DDEBUG
CDEFINES   =

# Objects to build, using the format o.<name> (will be varied for build type)
OBJS       = \
			 o.modhead \
			 o.rodis \
			 o.fpa \
             o.veneer \
             o.cli-parser \
             o.memoryi \
             o.showregs \
             o.io \
             o.os \
             o.introspection \
             o.defaultcpuregs \
             o.breakpoints

ifndef BUILD64
OBJS += o.prefetch \
        o.ifsrdfsr \
        o.faultinfo
endif

# Allow snprintf to be used
CLIBTYPE   = generic


include CModule

# Additional dependencies
$(OZDIR).veneer: h.modhead
$(OZDIR).breakpoints: h.modhead

# Export rules
# For any files you export with EXPORTS you may need to include an
# export rule
${EXP_C_H}.${COMPONENT}SWIs: cmhg.modhead
       ${CMHG} ${CMHGFLAGS} -xh $@ cmhg.modhead
# To export bare files you can use the ${CP} command:
# ${EXP_LIB}.${COMPONENT}.h.myheader: h.myheader
#        ${CP} $?  $@  ${CPFLAGS}

cleantarget:
           ${RM} h.modhead
# This clean target removes any module header file that was built.
inittarget:
           ${MKDIR} h
# This init target ensures that the header directory is created

#---------------------------------------------------------------------------
# Dynamic dependencies:
