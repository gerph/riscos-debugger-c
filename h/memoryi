/*******************************************************************
 * File:        memoryi
 * Purpose:     Disassembly of memory or file objects
 * Author:      Gerph
 * Date:        30 June 2024
 ******************************************************************/

#ifndef MEMORYI_H
#define MEMORYI_H

#include <stdint.h>

typedef enum disassemble_error_e {
    diserror_none,
    diserror_file_not_found
} disassemble_error_t;

int get_filetype(const char *filename);



typedef struct data_accessor_s data_accessor_t;

struct data_accessor_s {
    int (*read_block)(data_accessor_t *handle, uint32_t address, uint8_t *data, int size);
};

typedef struct file_accessor_s {
    data_accessor_t data;
    FILE *f;
    uint32_t current_ptr;
    uint32_t baseaddr;
    uint32_t filesize;
} file_accessor_t;

typedef struct memory_accessor_s {
    data_accessor_t data;
} memory_accessor_t;


/* A function to call to provide an annotation for a given address / data */
typedef const char *(*annotator_f)(uint32_t address, uint8_t *data, int size);


/*************************************************** Gerph *********
 Function:      create_memory_accessor
 Description:   Initialise a structure that allows access to memory.
 Parameters:    accessor-> the accessor to initialise
 Returns:       none
 ******************************************************************/
void create_memory_accessor(memory_accessor_t *mem);

/*************************************************** Gerph *********
 Function:      create_file_accessor
 Description:   Creates a file accessor for the given file, or returns an error.
 Parameters:    file-> the accessor to populate
                startp-> the start address to access (or NULL to ignore)
                endp-> the end address to access (or NULL it ignore)
 Returns:       error number, or 0 if none.
 ******************************************************************/
disassemble_error_t create_file_accessor(file_accessor_t *file,
                                         const char *filename,
                                         uint32_t *startp, uint32_t *endp);


/*************************************************** Gerph *********
 Function:      disassemble_file
 Description:   Disassemble a file and print to the screen.
 Parameters:    filename-> the file to disassemble
                thumb = 1 if we're disassembling thumb
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
 Returns:       error code
 ******************************************************************/
disassemble_error_t disassemble_file(const char *filename, int thumb,
                                     uint32_t start, uint32_t end);

/*************************************************** Gerph *********
 Function:      disassemble_memory
 Description:   Disassemble a memory and print to the screen.
 Parameters:    thumb = 1 if we're disassembling thumb
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
                annotator-> function to provide more annotation for the line,
                            or NULL for none
 Returns:       error code
 ******************************************************************/
disassemble_error_t disassemble_memory(int thumb,
                                       uint32_t start, uint32_t end,
                                       annotator_f annotator);



/*************************************************** Gerph *********
 Function:      dump_file
 Description:   Dump a file and print to the screen.
 Parameters:    filename-> the file to disassemble
                data_width = width of each block (1, 2 or 4 bytes)
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
 Returns:       error code
 ******************************************************************/
disassemble_error_t dump_file(const char *filename, int data_width,
                              uint32_t start, uint32_t end);

/*************************************************** Gerph *********
 Function:      dump_memory
 Description:   Dump some memory and print to the screen.
 Parameters:    data_width = width of each block (1, 2 or 4 bytes)
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
 Returns:       none
 ******************************************************************/
void dump_memory(int data_width,
                 uint32_t start, uint32_t end);

#endif
