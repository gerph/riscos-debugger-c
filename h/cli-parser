/*******************************************************************
 * File:        cli-parser
 * Purpose:     Parsing command line arguments for the debugger commands
 * Author:      Gerph
 * Date:        30 June 2024
 ******************************************************************/

#ifndef CLI_PARSER_H
#define CLI_PARSER_H

#include <stdint.h>


typedef enum arch_e {
    arch_arm32,
    arch_thumb
} arch_t;

typedef struct parsed_arch_s {
    arch_t arch;
    /* FIXME: Include a disassembly function pointer */
    int inst_width_min;
    int inst_width_max;
} parsed_arch_t;


typedef struct memory_params_s {
    uint32_t base_addr;
    uint32_t end_addr;
} memory_params_t;


typedef struct param_s {
    uint32_t value;
    int relative;
    int invalid;
} param_t;


/*************************************************** Gerph *********
 Function:      parse_value_or_reg
 Description:   Read a parameter from the argument string
 Parameters:    args-> argument string (ctrl terminated)
                params-> the block to fill in.
 Returns:       pointer to the next character in the string, or NULL if not parsed
 ******************************************************************/
const char *parse_value_or_reg(const char *args, param_t *params);

/*************************************************** Gerph *********
 Function:      parse_architecture
 Description:   Parse the  architecture string specified.
 Parameters:    args-> the command string (ctrl terminated)
                parsed_arch-> the structure to fill in.
 Returns:       pointer to the next character in the command string
 ******************************************************************/
const char *parse_architecture(const char *args, parsed_arch_t *parsed_arch);

/*************************************************** Gerph *********
 Function:      parser_data_width
 Description:   Parse the data width string as supplied on the command line
                'W' for 4 bytes, 'H' for 2, 'B' for 1.
 Parameters:    arg_string-> CLI string
                data_widthp -> where to store the width
                default_data_width = the default width to use
 Returns:       pointer to the next character
 ******************************************************************/
const char *parse_data_width(const char *arg_string, int *data_widthp, int default_data_width);

/*************************************************** Gerph *********
 Function:      parsed_memory_params
 Description:   Parse the memory paramemters shared by *Memory, *MemoryI.
 Parameters:    args_string-> the command string (control terminated)
                memory_params-> the structure to fill in
                default_size = number of bytes to use if no size/end is given.
 Returns:       1 for success, 0 for failure
 ******************************************************************/
int parse_memory_params(const char *arg_string, memory_params_t *memory_params, int default_size);

#endif
