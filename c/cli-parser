/*******************************************************************
 * File:        cli-parser
 * Purpose:     Parsing command line arguments for the debugger commands
 * Author:      Gerph
 * Date:        30 June 2024
 ******************************************************************/

#include <ctype.h>
#include <stdlib.h>
#include "swis.h"

#include "riscos/EnvNumbers.h"

#include "cli-parser.h"
#include "introspection.h"

/*************************************************** Gerph *********
 Function:      parse_architecture
 Description:   Parse the  architecture string specified.
 Parameters:    args-> the command string (ctrl terminated)
                parsed_arch-> the structure to fill in.
 Returns:       pointer to the next character in the command string
 ******************************************************************/
const char *parse_architecture(const char *args, parsed_arch_t *parsed_arch)
{
    char first;
    while (*args == ' ')
        args ++;

    if (*args > ' ' && (args[1] == ' ' || args[1] < ' '))
        first = toupper(*args);
    else
        first = 0;

    switch (first)
    {
        case 'T':
            parsed_arch->arch = arch_thumb;
            parsed_arch->inst_width_min = 2;
            parsed_arch->inst_width_max = 2;
            args++;
            break;

        default:
        case 'A':
            parsed_arch->arch = arch_arm32;
            parsed_arch->inst_width_min = 4;
            parsed_arch->inst_width_max = 4;
            if (first == 'A')
                args++;
            break;
    }

    return args;
}


/*************************************************** Gerph *********
 Function:      parser_data_width
 Description:   Parse the data width string as supplied on the command line
                'W' for 4 bytes, 'H' for 2, 'B' for 1.
 Parameters:    arg_string-> CLI string
                data_widthp -> where to store the width
                default_data_width = the default width to use
 Returns:       pointer to the next character
 ******************************************************************/
const char *parse_data_width(const char *arg_string, int *data_widthp, int default_data_width)
{
    int data_width = default_data_width;
    if (arg_string[0] == 'B' && arg_string[1] <= ' ')
    {
        data_width = 1;
        arg_string += 2;
    }
    else if (arg_string[0] == 'H' && arg_string[1] <= ' ')
    {
        data_width = 2;
        arg_string += 2;
    }
    else if (arg_string[0] == 'W' && arg_string[1] <= ' ')
    {
        data_width = 4;
        arg_string += 2;
    }
    else
    {
        data_width = 4;
    }

    *data_widthp = data_width;

    return arg_string;
}


uint32_t os_readunsigned(uint32_t base_and_flags, const char *args, const char **argsp)
{
    uint32_t value;
    _kernel_oserror *err;
    err = _swix(OS_ReadUnsigned, _INR(0, 1)|_OUTR(1, 2),
                                 base_and_flags, args,
                                 argsp, &value);
    if (err)
        *argsp = NULL;
    return value;
}

uint32_t readhex(const char *args, const char **argsp)
{
    return os_readunsigned(16, args, argsp);
}

uint32_t readint(const char *args, const char **argsp)
{
    return os_readunsigned(10, args, argsp);
}


/*************************************************** Gerph *********
 Function:      parse_register
 Description:   Parse  a register name into a number, or -1 if not known
 Parameters:    args-> the args to read
                argsp-> the end of the string
 Returns:       the register number, or -1 if not known
 ******************************************************************/
int parse_register(const char *args, const char **argsp)
{
    int regno;
    uint32_t *excregs = get_exception_area();

    if (excregs == NULL)
        return -1;

    /* FIXME: Should use the DescribeCPURegisters description */
    if (*args == 'r' || *args == 'R')
    {
        /* Numbered register. */
        regno = (int)readint(args + 1, argsp);
        if (args == NULL)
            return -1;
        if (regno >= 16 || regno < 0)
            return -1; /* Invalid register number */
        return regno;
    }

    if ((*args == 's' || *args == 'S') &&
        (*args == 'p' || *args == 'P'))
    {
        *argsp = args + 2;
        return 13;
    }

    if ((*args == 'l' || *args == 'L') &&
        (*args == 'r' || *args == 'R'))
    {
        *argsp = args + 2;
        return 14;
    }

    if ((*args == 'p' || *args == 'P') &&
        (*args == 'c' || *args == 'C'))
    {
        *argsp = args + 2;
        return 15;
    }

    return -1;
}


/*************************************************** Gerph *********
 Function:      fetch_register
 Description:   Read a register value from the exception block
 Parameters:    regno = register number
 Returns:       register value
 ******************************************************************/
uint32_t fetch_register(int regno)
{
    uint32_t *excregs = get_exception_area();
    if (excregs == NULL)
        return 0;

    return excregs[regno];
}


/*************************************************** Gerph *********
 Function:      parse_value_or_reg
 Description:   Read a parameter from the argument string
 Parameters:    args-> argument string (ctrl terminated)
                params-> the block to fill in.
 Returns:       pointer to the next character in the string, or NULL if not parsed
 ******************************************************************/
const char *parse_value_or_reg(const char *args, param_t *params)
{
    int regno;
    params->invalid = 1;
    params->value = 0;
    params->relative = 0;
    if (args == NULL)
    {
        params->invalid = 0;
        return NULL;
    }

    while (*args == ' ')
        args++;

    if (*args < ' ')
    {
        params->invalid = 0;
        return NULL;
    }

    if (*args == '+' || *args == '-')
    {
        params->relative = (*args == '+') ? 1 : -1;
        args++;
    }

    /* We want to be able to handle the register numbers here.
     * So for example using 'r1' will give r1 from the current
     * exception block.
     */
    regno = parse_register(args, &args);
    if (regno == -1)
    {
        params->value = readhex(args, &args);
        if (args == NULL)
            return NULL;
        if (*args > ' ' && *args != '+' && *args != '-')
        {
            /* The string might have been 'bob' or similar, where it starts out as a hex but is suffixed */
            return NULL;
        }
    }
    else
    {
        params->value = fetch_register(regno);
    }

    params->invalid = 0;
    return args;
}


/*************************************************** Gerph *********
 Function:      parse_memory_params
 Description:   Parse the memory parameters shared by *Memory, *MemoryI.
 Parameters:    args -> the command string (control terminated)
                memory_params-> the structure to fill in
                default_size = number of bytes to use if no size/end is given.
 Returns:       1 for success, 0 for failure
 ******************************************************************/
int parse_memory_params(const char *args, memory_params_t *memory_params, int default_size)
{
    param_t base_param, other_param, third_param;

    args = parse_value_or_reg(args, &base_param);
    args = parse_value_or_reg(args, &other_param);
    args = parse_value_or_reg(args, &third_param);

    if (base_param.invalid ||
        other_param.invalid ||
        third_param.invalid)
        return 0;

    if (base_param.relative)
        return 0; /* RISCOSSyntheticError(self.ro, "First parameter must not be relative") */

    if (third_param.value)
    {
        /* Three parameter form means A+B to A+B+C */
        if (third_param.relative != 1 || other_param.relative == 0)
            return 0; /* RISCOSSyntheticError(self.ro, syntax) */

        base_param.value = base_param.value + other_param.value * other_param.relative;
        other_param.value = base_param.value + third_param.value * third_param.relative;
    }
    else if (other_param.value)
    {
        /* Two parameter form means A to B or A to A+B */
        if (other_param.relative != 0)
            other_param.value = base_param.value + other_param.value * other_param.relative;
    }
    else
    {
        /* One parameter form means A to A+<default size> */
        other_param.value = base_param.value + default_size;
    }

    /* FIXME: Maybe call OS_ValidateAddress on the range? */

    /* If they're inverted, swap them - allows *MemoryI 8000 -20 */
    if (base_param.value > other_param.value)
    {
        uint32_t value = base_param.value;
        base_param.value = other_param.value;
        other_param.value = value;
    }

    memory_params->base_addr = base_param.value;
    memory_params->end_addr = other_param.value;
    return 1;
}
