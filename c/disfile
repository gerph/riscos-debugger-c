/*******************************************************************
 * File:        disfile
 * Purpose:     Disassemble a single file
 * Author:      Gerph
 * Date:        16 Jun 2024
 ******************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "swis.h"

#include "rodis.h"
#include "cli-parser.h"
#include "memoryi.h"


void error(char *message)
{
    printf("ERROR: %s\n", message);
    exit(1);
}


int main(int argc, char *argv[])
{
    char *filename;
    int thumb = 0;
    int dump = 0;
    int data_width = 4;
    disassemble_error_t err;
    uint32_t start = 0;
    uint32_t end = 0xFFFFFFFF;

    if (argc < 2 | argc > 5)
    {
        printf("Syntax: %s <filename> [T|A] [<address> [[+|-]<address> [[+|-]<address>]\n", argv[0]);
        printf("        %s -dump <filename> [B] [<address> [[+|-]<address> [[+|-]<address>]\n", argv[0]);
        exit(1);
    }

    if (strcmp(argv[1], "-dump") == 0)
    {
        dump = 1;
        filename = argv[2];
        argv+=3;
        argc-=3;
    }
    else
    {
        /* ARM32 disassembly */
        filename = argv[1];
        argv+=2;
        argc-=2;
    }

    /* Construct a big string from the following arguments */
    {
        static char cmdline[256] = "";
        while (argc)
        {
            char *str = *argv;

            strcat(cmdline, str);
            strcat(cmdline, " ");

            argc--;
            argv++;
        }

        {
            /* Parse the parameters into addresses */
            parsed_arch_t parsed_arch;
            memory_params_t memory_params;
            int success;
            const char *arg_string = cmdline;

            if (dump)
            {
                arg_string = parse_data_width(arg_string, &data_width, data_width);
            }
            else
            {
                arg_string = parse_architecture(arg_string, &parsed_arch);
                thumb = (parsed_arch.arch == arch_thumb) ? 1 : 0;
            }

            success = parse_memory_params(arg_string, &memory_params, 0x8000000);
            if (!success)
            {
                printf("Failed\n");
                exit(1);
            }

            start = memory_params.base_addr;
            end = memory_params.end_addr;
        }
    }

    if (dump)
    {
        err = dump_file(filename, data_width, start, end);
    }
    else
    {
        err = disassemble_file(filename, thumb, start, end);
    }
    if (err == diserror_file_not_found)
        error("File not found");
}
