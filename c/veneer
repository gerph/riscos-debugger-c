/*******************************************************************
 * File:        veneer
 * Purpose:     Debugger module interface
 * Author:      Gerph
 ******************************************************************/

#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "modhead.h"

#include "rodis.h"
#include "cli-parser.h"
#include "memoryi.h"
#include "showregs.h"
#include "breakpoints.h"
#include "prefetch.h"
#include "io.h"
#include "os.h"
#include "acknowledgements.h"


/* Number of instructions to disassemble if not supplied */
#define MEMORYI_DEFAULT_SIZE (16)

/* Where application space starts */
#define APPLICATION_SPACE_BASE (0x8000)

/* Invalid instruction to use by default in *InitStore */
#ifdef __riscos64
/* https://developer.arm.com/documentation/ddi0602/2022-03/Base-Instructions/UDF--Permanently-Undefined- */
#define DEFAULT_INITSTORE_VALUE (0x0000FFFF) /* AArch64 value */
#else
#define DEFAULT_INITSTORE_VALUE (0xE7FFFFFF) /* AArch32 value */
#endif

/* Number of rows to dump in *Memory by default */
#define MEMORY_DEFAULT_SIZE (16)

/* Define this to debug this file */
//#define DEBUG


#ifdef DEBUG
#define dprintf if (1) printf
#else
#define dprintf if (0) printf
#endif

#define ErrorNumber_ModuleBadSWI (0x110)


/***************************************************************************
 * Function:     Mod_Init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *Mod_Init(const char *tail, int podule_base, void *pw)
{
    dprintf("Module Debugger initialised\n");

    acknowledgements_announce(true);

    return NULL;
}


/***************************************************************************
 * Function:     Mod_Final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *Mod_Final(int fatal, int podule_base, void *pw)
{
    dprintf("Module Debugger dying\n");
    acknowledgements_announce(false);

    breakpoint_final();
    return NULL;
}

/*************************************************** Gerph *********
 Function:     Mod_Service
 Description:  Service handler routine
 Parameters:   service_number = the number
               r-> registers on entry
               pw = private word
 Returns:      none
 ******************************************************************/
void Mod_Service(int service_number, _kernel_swi_regs *r, void *pw)
{
    acknowledgements_service(service_number, r, pw);
}


/***************************************************************************
 * Description:  Star command and help request handler routines.
 * Parameters:   arg_string = pointer to argument string (control
 *                            terminated), or output buffer
 *               argc       = number of arguments passed
 *               number     = command number (see CMD_* definitions below)
 *               pw         = private word for module
 * On exit:      If number indicates a help entry:
 *                 To output, assemble zero terminated output into
 *                 arg_string, and return help_PRINT_BUFFER to print it.
 *                 To stay silent, return NULL.
 *                 To given an error, return an error pointer.
 *                 [In this case, you need to cast the 'const' away]
 *               If number indicates a configure option:
 *                 If arg_string is arg_STATUS, then print status, otherwise
 *                 use argc and arg_string to set option.
 *                 Return NULL for no error.
 *                 Return one of the four error codes below (configure_*)
 *                 for a generic error message.
 *                 Return an error pointer for a custom error.
 *               If number indicates a command entry:
 *                 Execute the command given by number, and arg_string.
 *                 Return NULL on success,
 *                 Return a pointer to an error block on failure.
 **************************************************************************/
_kernel_oserror *Mod_Command(const char *arg_string, int argc, int number,
                             void *pw)
{
    return NULL;
}



/* *Memory [B|W|H] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]] */
_kernel_oserror *Cmd_Memory(const char *arg_string, int argc, int number,
                            void *pw)
{
    memory_params_t memory_params;
    int data_width = 4;
    int row_width = 16;
    int success;

    arg_string = parse_data_width(arg_string, &data_width, data_width);

    success = parse_memory_params(arg_string, &memory_params, MEMORY_DEFAULT_SIZE * row_width, &arg_string);
    if (!success)
    {
        return err_CannotParseStarMemory;
    }
    if (arg_string && *arg_string >= ' ')
    {
        return err_CannotParseStarMemory;
    }

    dump_memory(data_width,
                memory_params.base_addr,
                memory_params.end_addr);

    return NULL;
}



/* *MemoryA [B|W|H] <addr1|reg1> [<value|reg2>] */
_kernel_oserror *Cmd_MemoryA(const char *arg_string, int argc, int number,
                            void *pw)
{
    parsed_arch_t parsed_arch;
    memory_params_t memory_params;
    int data_width = 4;
    int row_width = 16;
    uint32_t value;
    uint32_t address;
    int interactive;

    /* MemoryA only makes sense when writing instructions for the current architecture */
    prepare_architecture(arch_default, &parsed_arch);

    arg_string = parse_data_width(arg_string, &data_width, data_width);

    {
        param_t param;
        arg_string = parse_value_or_reg(arg_string, &param);
        if (arg_string == NULL || param.invalid)
            return err_BadSyntaxMemoryA;
        address = param.value;

        arg_string = parse_value_or_reg(arg_string, &param);
        if (param.invalid)
            return err_BadSyntaxMemoryA;
        if (!arg_string)
        {
            interactive = 1;
            value = 0;
        }
        else
        {
            interactive = 0;
            value = param.value;
        }
    }

    if (arg_string != NULL && *arg_string >= ' ')
        return err_BadSyntaxMemoryA;

    if (!interactive)
    {
        /* Write the value right now */
        if (data_width == 1)
        {
            *(uint8_t*)address = value;
            printf("Wrote byte &%02lx to &%08lx\n", value & 255, address);
        }
        else if (data_width == 2)
        {
            *(uint16_t*)address = value;
            printf("Wrote half-word &%04lx to &%08lx\n", value & 0xFFFF, address);
        }
        else if (data_width == 4)
        {
            *(uint32_t*)address = value;
            printf("Wrote word &%08lx to &%08lx\n", value, address);
        }
    }
    else
    {
        /* When interactive we output a string like:
            + <address> : <ascii> : <value> : <disassembly>
           and then:
            Enter new value :
         */
        int quit = 0;
        int direction = 1;
        while (!quit)
        {
            int success;
            char line[12];
            printf("%s ", direction == 1 ? "+" : "-");
            if (data_width >= parsed_arch.inst_width_min &&
                data_width <= parsed_arch.inst_width_max)
            {
                disassemble_memory(&parsed_arch, address, address + data_width, NULL);
            }
            else
            {
                dump_memory(data_width, address, address + data_width);
            }
re_enter:
            printf("Enter a new value : ");
            success = os_readline(line, sizeof(line));
            if (!success)
                break;
            if (strcmp(line, "+") == 0)
            {
                direction = 1;
            }
            else if (strcmp(line, "-") == 0)
            {
                direction = -1;
            }
            else if (strcmp(line, ".") == 0)
            {
                quit = 1;
            }
            else if (strcmp(line, "") == 0)
            {
                /* Do nothing, go to next location */
            }
            else
            {
                param_t param;
                const char *end;
                end = parse_value_or_reg(line, &param);
                if (end == NULL || param.invalid)
                {
                    printf("Cannot parse string '%s'\n", line);
                    goto re_enter;
                }
                value = param.value;

                /* Write the value into memory */
                if (data_width == 1)
                {
                    *(uint8_t*)address = value;
                    printf("Wrote byte &%lx to &%lx\n", value & 255, address);
                }
                else if (data_width == 2)
                {
                    *(uint16_t*)address = value;
                    printf("Wrote half-word &%lx to &%lx\n", value & 0xFFFF, address);
                }
                else if (data_width == 4)
                {
                    *(uint32_t*)address = value;
                    printf("Wrote word &%lx to &%lx\n", value, address);
                }
            }

            if (direction == 1)
                address += data_width;
            else
                address -= data_width;
        }
    }

    return NULL;
}




/* *MemoryI [T|A] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]] */
_kernel_oserror *Cmd_MemoryI(const char *arg_string, int argc, int number,
                             void *pw)
{
    disassemble_error_t err;
    parsed_arch_t parsed_arch;
    memory_params_t memory_params;
    int inst_width;
    int success;

    arg_string = parse_architecture(arg_string, &parsed_arch);

    inst_width = parsed_arch.inst_width_max;
    success = parse_memory_params(arg_string, &memory_params, MEMORYI_DEFAULT_SIZE * inst_width, &arg_string);
    if (!success)
    {
        return err_CannotParseStarMemoryI;
    }
    if (arg_string && *arg_string >= ' ')
    {
        return err_CannotParseStarMemoryI;
    }

    err = disassemble_memory(&parsed_arch,
                             memory_params.base_addr,
                             memory_params.end_addr,
#ifdef __riscos64
                             NULL
#else
                             breakpoint_annotate
#endif
                             );

    return NULL;
}


_kernel_oserror *Cmd_DumpI(const char *arg_string, int argc, int number,
                           void *pw)
{
    disassemble_error_t err;
    parsed_arch_t parsed_arch;
    memory_params_t memory_params;
    int inst_width;
    int success;
    const char *filename;

    /* Skip leading spaces */
    while (*arg_string == ' ')
        arg_string++;

    filename = arg_string;

    /* Find the end of the filename parameter */
    while (*arg_string > ' ')
        arg_string++;

    arg_string = parse_architecture(arg_string, &parsed_arch);

    inst_width = parsed_arch.inst_width_max;

    success = parse_memory_params(arg_string, &memory_params, 0x80000000, &arg_string);
    if (!success)
    {
        return err_CannotParseStarDumpI;
    }
    if (arg_string && *arg_string >= ' ')
    {
        return err_CannotParseStarDumpI;
    }

    err = disassemble_file(filename,
                           &parsed_arch,
                           memory_params.base_addr,
                           memory_params.end_addr);
    if (err == diserror_file_not_found)
    {
        _kernel_oserror *roerr = _swix(OS_File, _INR(0,2), 19, filename, 0);
        return roerr;
    }

    return NULL;
}



_kernel_oserror *Cmd_InitStore(const char *arg_string, int argc, int number,
                               void *pw)
{
    uint32_t *mem = (uint32_t*)APPLICATION_SPACE_BASE;
    uint32_t *limit;
    uint32_t value;
    if (argc == 0)
    {
        value = DEFAULT_INITSTORE_VALUE;
    }
    else
    {
        param_t param;
        arg_string = parse_value_or_reg(arg_string, &param);
        if (arg_string == NULL)
            return err_BadSyntaxInitStore;
        value = param.value;
    }

    limit = (uint32_t *)read_memory_limit();
    for (; mem<limit; mem++)
        *mem = value;
    printf("Store initialised (up to &%08lx) with &%08lx\n", (uint32_t)limit, value);
    return NULL;
}



_kernel_oserror *Cmd_BreakSet(const char *arg_string, int argc, int number,
                              void *pw)
{
#ifdef __riscos64
    return err_NotSupported64;
#else
    _kernel_oserror *err;
    uint32_t value;
    param_t param;

    arg_string = parse_value_or_reg(arg_string, &param);
    if (arg_string == NULL)
        return err_BadSyntaxBreakpoint;
    value = param.value;

    err = breakpoint_set(value);

    return err;
#endif
}


_kernel_oserror *Cmd_BreakClr(const char *arg_string, int argc, int number,
                              void *pw)
{
#ifdef __riscos64
    return err_NotSupported64;
#else
    _kernel_oserror *err;
    uint32_t value;
    param_t param;

    if (argc == 0)
    {
        /* Request to clear all breakpoints */
        int response = 0;
        _kernel_oserror *err;

        printf("Clear all breakpoints (y/n) ? ");
        err = os_confirm(&response);
        if (err)
            return err;
        if (response == 27)
            printf("Escape\n");
        else
            printf("%c\n", response);
        if (response != 'y')
        {
            printf("Not clearing\n");
            return NULL;
        }
        /* Finalising the breakpoint system will remove all the breakpoints and handlers */
        return breakpoint_final();
    }
    else
    {
        /* Clear a specific breakpoint */
        arg_string = parse_value_or_reg(arg_string, &param);
        if (arg_string == NULL)
            return err_BadSyntaxBreakpoint;
        value = param.value;

        err = breakpoint_clear(value);
    }

    return err;
#endif
}


_kernel_oserror *Cmd_BreakList(const char *arg_string, int argc, int number,
                               void *pw)
{
#ifdef __riscos64
    return err_NotSupported64;
#else
    _kernel_oserror *err;
    err = breakpoint_list();

    return err;
#endif
}



_kernel_oserror *Cmd_ShowRegs(const char *arg_string, int argc, int number,
                              void *pw)
{
    uint32_t *regdump = get_exception_area();
    excdumpregion_t *excdumpregion = get_exception_dump_region();
    last_abort_info_t last_abort_info;
    get_last_abort_info(&last_abort_info);

    cmd_showregs(regdump, &last_abort_info, excdumpregion);
    return NULL;
}



_kernel_oserror *Cmd_Debug(const char *arg_string, int argc, int number,
                           void *pw)
{
#ifdef __riscos64
    return err_NotSupported64;
#else
    prefetch_ws_t *ws = get_prefetch_handler_workspace();
    uint32_t bkpt = ws->breakpoint_instruction;
    breakpoint_t *bp = breakpoint_find_by_instruction(bkpt);

    write("Entering debug shell for breakpoint #");
    // FIXME: No decimal printing?
    writeln("");
    while (!ws->cont)
    {
        _kernel_oserror *err;
        int success;
        static char line[1024];

        write("Debug *");

        /* Read a line */
        success = os_readline(line, sizeof(line));
        if (!success)
            break; /* Something went wrong - give up on the shell */

        /* Execute it */
        err = _swix(OS_CLI, _IN(0), line);
        if (err)
        {
            write("Error: ");
            write(err->errmess);
            write(" (&");
            writehex4(err->errnum);
            writeln(")");
        }
        writeln("");
    }

    if (ws->cont)
    {
        writeln("Continuing from breakpoint");
    }
    else
    {
        /* Already printing a message in the return from the prefetch abort handler */
    }

    return NULL;
#endif
}

_kernel_oserror *Cmd_Continue(const char *arg_string, int argc, int number,
                              void *pw)
{
#ifdef __riscos64
    return err_NotSupported64;
#else
    prefetch_ws_t *ws = get_prefetch_handler_workspace();
    uint32_t bkpt = ws->breakpoint_instruction;
    breakpoint_t *bp = breakpoint_find_by_instruction(bkpt);

    /* If we were in a breakpoint and the *Debug was running, we will return back and continue from the prefetch handler */
    ws->cont = 1;
    ws->old_instruction = bp->old_value;
    return NULL;
#endif
}


_kernel_oserror *SWI_Disassemble(int number, _kernel_swi_regs *r, void *pw)
{
    uint32_t word = (uint32_t)r->r[0];
    uint32_t addr = (uint32_t)r->r[1];
    const  char *str;
    parsed_arch_t parsed_arch;

    prepare_architecture(arch_default, &parsed_arch);

    str = parsed_arch.disassemble((uint8_t*)&word, parsed_arch.inst_width_max, addr);

    r->r[1] = (int)str;
    r->r[2] = strlen(str);
    return NULL;
}

_kernel_oserror *SWI_DisassembleThumb(int number, _kernel_swi_regs *r,
                                      void *pw)
{
    uint32_t word = (uint32_t)r->r[0];
    uint32_t addr = (uint32_t)r->r[1];
    const char *str;
    parsed_arch_t parsed_arch;

    prepare_architecture(arch_thumb, &parsed_arch);

    str = parsed_arch.disassemble((uint8_t*)&word, parsed_arch.inst_width_max, addr);

    r->r[1] = (int)str;
    r->r[2] = strlen(str);
    return NULL;
}


_kernel_oserror *SWI_Flags(int number, _kernel_swi_regs *r, void *pw)
{
    uint32_t bic = (uint32_t)r->r[0];
    uint32_t eor = (uint32_t)r->r[1];

    return err_NotSupportedPlus;
}


_kernel_oserror *SWI_CPU(int number, _kernel_swi_regs *r, void *pw)
{
    return err_NotSupportedPlus;
}


_kernel_oserror *SWI_DisassemblePlus(int number, _kernel_swi_regs *r, void *pw)
{
    uint32_t word = (uint32_t)r->r[0];
    uint32_t addr = (uint32_t)r->r[1];
    uint32_t flags = (uint32_t)r->r[2];

    return err_NotSupportedPlus;
}


/*
=>
   R0 = architecture identifier for disassembly, or -1 for current architecture

             Value   Meaning
              -1      Current architecture
              0       ARM 32 bit (A32)
              1       ARM 64 bit (A64)
              2       x86 64 bit (x86-64)
              3       Thumb
              other   Reserved for future expansion

   R1 = pointer to instruction bytes
   R2 = number of instruction bytes supplied
   R3 = address to assume the instruction came from
   R4 = pointer to output buffer, or 0 to use internal buffer
   R5 = size of output buffer, or 0 to read size required
   R6 = flags to apply to disassembly (architecture specific), or &FFFFFFFF for default flags

<=
   R0 = architecture identifier used
   R1 = pointer to next instruction byte
   R2 = number of instruction bytes remaining in buffer, or a negative value to indicate the number of bytes that are required
   R3 preserved
   R4 = address of buffer containing null-terminated text, in either the supplied or internal buffer
   R5 = number of bytes remaining in buffer, or negative number of bytes needed if buffer too short
   R6 = length of disassembled text
 */
_kernel_oserror *SWI_DisassembleArch(int number, _kernel_swi_regs *r, void *pw)
{
    uint32_t arch = (uint32_t)r->r[0];
    uint8_t *data = (uint8_t *)r->r[1];
    uint32_t datalen = (uint32_t)r->r[2];
    uint32_t addr = (uint32_t)r->r[3];
    char *output = (char *)r->r[4];
    uint32_t outputlen = (uint32_t)r->r[5];
    uint32_t flags = (uint32_t)r->r[6]; /* Not currently used */

    parsed_arch_t parsed_arch;
    bool ok;
    ok = prepare_architecture((arch_t)arch, &parsed_arch);
    if (!ok)
    {
        return err_UnsupportedArch;
    }

    r->r[0] = parsed_arch.arch;

    {
        /* AArch32 ARM */
        const char *str;
        int wordsize = parsed_arch.inst_width_max; /* FIXME: We don't handle variable length instructions */
        int needed;

        if (datalen < wordsize)
        {
            r->r[2] = -wordsize;
            return err_BufferOverflow;
        }

        str = parsed_arch.disassemble(data, datalen, addr);

        needed = strlen(str) + 1;
        if (outputlen < needed)
        {
            r->r[5] = -needed;
            return err_BufferOverflow;
        }

        r->r[1] = (int)data + wordsize;
        r->r[2] = datalen - wordsize;

        if (output == NULL)
        {
            /* They want to use our buffer */
            r->r[4] = (int)str;
            r->r[5] = 0;
        }
        else
        {
            strcpy(output, str);
            r->r[5] -= needed;
        }

        r->r[6] = strlen(str);
        return NULL;
    }
}
