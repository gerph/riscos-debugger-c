/*******************************************************************
 * File:        breakpoints
 * Purpose:     Deals with managing the breakpoints in the ARM code.
 * Author:      Gerph
 * Date:        21 Jul 2024
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

#include "modhead.h"
#include "breakpoints.h"
#include "rodis.h"
#include "prefetch.h"
#include "introspection.h"


static breakpoint_t *breakpoints;

static int next_number = 1;

/* Encoding values */
#define BKPT_OPCODE (0xe1200070lu)
#define BKPT_MASK   (0xFFF000F0lu)

/* Encoding of the BKPT instruction in ARM */
#define BKPT_INSTRUCTION(number) (BKPT_OPCODE | ((number) & 0xFlu) | (((number) >> 4)<<8))

/* Highest breakpoint number we can use */
#define BKPT_LIMIT (65535)

/* Extract the number from the BKPT instruction */
#define BKPT_EXTRACT(value) (((value) & 0xFlu) | ((((value)>>8)<<4) & 0xFFF0))


#define ARMEXCEPTION_PREFETCH (3)
#define CLAIMPROCESSORVECTOR_CLAIM   (1<<8)
#define CLAIMPROCESSORVECTOR_RELEASE (0<<8)

#define NO_HANDLER (0x00000040lu)

#ifndef __riscos64
/* None of this breakpoint code works on RISC OS 64 yet */

uint32_t old_prefetch_handler = NO_HANDLER;


/*************************************************** Gerph *********
 Function:      breakpoint_install_prefetch_handler
 Description:   Add a handler which is called when a Prefetch exception occurs.
 Parameters:    none
 Returns:       pointer to error, or NULL if ok
 ******************************************************************/
_kernel_oserror *breakpoint_install_prefetch_handler(void)
{
    _kernel_oserror *err;
    if (old_prefetch_handler != NO_HANDLER)
        return NULL;

    err = _swix(OS_ClaimProcessorVector, _INR(0, 1) | _OUT(1),
                                         ARMEXCEPTION_PREFETCH | CLAIMPROCESSORVECTOR_CLAIM,
                                         prefetch_handler,
                                         &old_prefetch_handler);
    if (err)
    {
        old_prefetch_handler = NO_HANDLER;
        return err;
    }

    {
        prefetch_ws_t *ws = get_prefetch_handler_workspace();
        ws->old_prefetch_handler = old_prefetch_handler;
        ws->exception_dump_area = get_exception_area();
    }

    return NULL;
}

/*************************************************** Gerph *********
 Function:      breakpoint_remove_prefetch_handler
 Description:   Remove the handler which we registered for Prefetch exceptions.
 Parameters:    none
 Returns:       pointer to error, or NULL if ok
 ******************************************************************/
_kernel_oserror *breakpoint_remove_prefetch_handler(void)
{
    _kernel_oserror *err;
    if (old_prefetch_handler == NO_HANDLER)
        return NULL;

    err = _swix(OS_ClaimProcessorVector, _INR(0, 2),
                                         ARMEXCEPTION_PREFETCH | CLAIMPROCESSORVECTOR_RELEASE,
                                         old_prefetch_handler,
                                         prefetch_handler);
    if (err)
    {
        return err;
    }
    old_prefetch_handler = NO_HANDLER;

    return NULL;
}


/*************************************************** Gerph *********
 Function:      breakpoint_annotate
 Description:   Find a address of a breakpoint and annotate it
 Parameters:    address = address of instruction
                data-> the instruction data
                size = the size of the data
 Returns:       pointer to a string if annotating, or NULL if not
 ******************************************************************/
const char *breakpoint_annotate(uint32_t address, uint8_t *data, int size)
{
    static char buffer[256]; /* FIXME: Make this some calculated constant size */

    int number;
    uint32_t value;
    breakpoint_t *bp;
    if (size != 4)
        return NULL; /* Not ARM, so not an instruction */

    value = *(uint32_t*)data; /* FIXME: Assumes that the passed data is aligned */

    if ((value & BKPT_MASK) != BKPT_OPCODE)
        return NULL; /* Not a breakpoint instruction */

    bp = breakpoint_find_by_instruction(value);

    if (!bp)
    {
        /* Not a known breakpoint */
        return "Unknown breakpoint";
    }

    sprintf(buffer, "Old code: %s", debugger_disassemble(bp->old_value, bp->address));
    return buffer;
}


/*************************************************** Gerph *********
 Function:      breakpoint_find_by_instruction
 Description:   Locate the breakpoint block for an instruction
 Parameters:    instr = the instruction we hit
 Returns:       pointer to breakpoint_t or NULL if not found.
 ******************************************************************/
breakpoint_t *breakpoint_find_by_instruction(uint32_t instr)
{
    int number = BKPT_EXTRACT(instr);
    breakpoint_t *bp;
    /* Find the breakpoint in the list */
    for (bp = breakpoints;
         bp && bp->number != number;
         bp = bp->next)
        ;

    return bp;
}


/*************************************************** Gerph *********
 Function:      breakpoint_set
 Description:   Set a breakpoint by writing a BKPT instruction into memory
 Parameters:    address = the address to break at
 Returns:       pointer to an error, or NULL if all was well
 ******************************************************************/
_kernel_oserror *breakpoint_set(uint32_t address)
{
    uint32_t value;
    int number = next_number++;
    if (next_number > BKPT_LIMIT)
        next_number = 1;
    /* FIXME: We should check that the breakpoint number wasn't reused */

    /* FIXME: We should check that the address isn't already breakpointed */

    if (address & 3)
        return err_NonAligned;

    /* Install prefetch handler */
    {
        _kernel_oserror *err = breakpoint_install_prefetch_handler();
        if (err)
            return err;
    }

    /* Replacing the instruction */
    {
        /* FIXME: Maybe we should validate this memory first; but a crash here is ok */
        value = *(uint32_t*)address;
        *(uint32_t*)address = BKPT_INSTRUCTION(number);
    }

    {
        /* Add a breakpoint to the list */
        breakpoint_t *bp;

        bp = calloc(1, sizeof(*bp));
        if (bp == NULL)
            return err_NoRoom;

        bp->address = address;
        bp->old_value = value;
        bp->number = number;

        /* We're adding to the head of the list because it doesn't matter when we search for them whether it's fast
           or ordered */
        bp->next = breakpoints;
        breakpoints = bp;
    }

    printf("Breakpoint set at &%08lx\n", address);

    return NULL;
}


/*************************************************** Gerph *********
 Function:      breakpoint_clear
 Description:   Removes a breakpoint by restoring the old instruction
 Parameters:    address = the address to break at
 Returns:       pointer to an error, or NULL if all was well
 ******************************************************************/
_kernel_oserror *breakpoint_clear(uint32_t address)
{
    breakpoint_t **lastp = &breakpoints;
    breakpoint_t *bp;

    if (address & 3)
        return err_NonAligned;

    /* Find the breakpoint in the list */
    for (bp = breakpoints;
         bp && bp->address != address;
         lastp = &bp->next, bp = bp->next)
        ;

    if (bp == NULL)
        return err_BreakNotFound;

    /* Remove the patched instruction */
    /* FIXME: Should we check that the value is as expected ? */
    *((uint32_t *)bp->address) = bp->old_value;

    /* Unlink from the list */
    *lastp = bp->next;
    free(bp);

    /* If no longer breakpoints, remove the handler */
    if (!breakpoints)
    {
        _kernel_oserror *err;
        err = breakpoint_remove_prefetch_handler();
        if (err)
            return err;
    }

    return NULL;
}


/*************************************************** Gerph *********
 Function:      breakpoint_list
 Description:   Lists all the breakpoints to the screen
 Parameters:    address = the address to break at
 Returns:       pointer to an error, or NULL if all was well
 ******************************************************************/
_kernel_oserror *breakpoint_list(void)
{
    breakpoint_t *bp;

    for (bp = breakpoints; bp; bp = bp->next)
    {
        printf("Breakpoint #%-5i : &%08lx : Old value: &%08lx  : %s\n",
               bp->number, bp->address, bp->old_value,
               debugger_disassemble(bp->old_value, bp->address));
    }

    return NULL;
}
#endif


/*************************************************** Gerph *********
 Function:      breakpoint_final
 Description:   Finalise the breakpoint system, removing all handlers.
 Parameters:    none
 Returns:       pointer to an error, or NULL if all was well
 ******************************************************************/
_kernel_oserror *breakpoint_final(void)
{
#ifndef __riscos64
    while (breakpoints)
    {
        breakpoint_t *bp = breakpoints;
        _kernel_oserror *err;

        err = breakpoint_clear(bp->address);
        if (err)
            return err;

        if (breakpoints == bp)
        {
            /* The list didn't change; that's an internal error; give up rather than hang. */
            return err_InternalError;
        }
    }
#endif

    return NULL;
}
