/*******************************************************************
 * File:        introspection
 * Purpose:     Reading information about the system that we are on.
 * Author:      Gerph
 * Date:        2024-07-07
 ******************************************************************/

#include <stdint.h>
#include "swis.h"

#include "riscos/EnvNumbers.h"
#include "riscos/OSReadSysInfo.h"

#include "cpuarchregs.h"
#include "introspection.h"
#include "defaultcpuregs.h"


/*************************************************** Gerph *********
 Function:      read_memory_limit
 Description:   Reads the limit of memory in the application space
 Parameters:    none
 Returns:       maximum aaddress in application space
 ******************************************************************/
uint32_t read_memory_limit(void)
{
    uint32_t limit;
    _kernel_oserror *err;
    err = _swix(OS_ChangeEnvironment, _INR(0, 3)|_OUT(1), 0, 0, 0, 0, &limit);
    if (err)
        limit = 0x8000;
    return limit;
}


/*************************************************** Gerph *********
 Function:      get_exception_area
 Description:   Reads the location of the exception registers 'handler'
 Parameters:    none
 Returns:       pointer to the registers block, or NULL if none known
 ******************************************************************/
uint32_t *get_exception_area(void)
{
    uint32_t *excregs = NULL;
    _kernel_oserror *err;
    err = _swix(OS_ChangeEnvironment, _INR(0, 3)|_OUT(1), ExceptionDumpArea, 0, 0, 0, &excregs);
    if (err)
        return NULL;
    return excregs;
}

/*************************************************** Gerph *********
 Function:      describe_cpu_registers
 Description:   Call OS_PlatformFeatures 64 to read the features.
 Parameters:    none
 Returns:       pointer to the archregs structure
 ******************************************************************/
const archregs_t *describe_cpu_registers(void)
{
    _kernel_oserror *err;
    const archregs_t *archregs;
    err = _swix(OS_PlatformFeatures, _IN(0)|_OUT(0), OS_PlatformFeatures_DescribeCPURegisters, &archregs);
    if (err)
    {
        archregs = get_default_cpu_registers32();
    }

    return archregs;
}

/*************************************************** Gerph *********
 Function:      get_exception_dump_region
 Description:   Read the exception dump region
 Parameters:    none
 Returns:       pointer to the dump region, or NULL if not found
 ******************************************************************/
excdumpregion_t *get_exception_dump_region(void)
{
    _kernel_oserror *err;
    excdumpregion_t *excdump;
    err = _swix(OS_ChangeEnvironment, _INR(0, 3)|_OUT(3), ExceptionDumpRegion, 0, 0, 0, &excdump);
    if (err)
    {
        /* No support for the exception dump region, so we cannot return it */
        return NULL;
    }

    return excdump;
}

/*************************************************** Gerph *********
 Function:      get_last_abort_info
 Description:   Read information about the last abort
 Parameters:    info -> last_abort_info_t structure containing the
                PC, PSR and aborting address. All values will be 0
                if no information is known.
 Returns:       none
 ******************************************************************/
void get_last_abort_info(last_abort_info_t *info)
{
    _kernel_oserror *err;

    err = _swix(OS_ReadSysInfo, _IN(0)|_OUTR(1,3), ReadSysInfoReason_LastAbort,
                                                   &info->pc,
                                                   &info->psr,
                                                   &info->fault_address);
    if (err)
    {
        info->pc = 0;
        info->psr = 0;
        info->fault_address = 0;
    }
}
