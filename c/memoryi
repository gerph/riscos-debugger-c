/*******************************************************************
 * File:        memoryi
 * Purpose:     Disassembly of memory or file objects
 * Author:      Gerph
 * Date:        30 June 2024
 ******************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdint.h>
#include "swis.h"

#include "memoryi.h"
#include "rodis.h"


int get_filetype(const char *filename)
{
    int type;
    _kernel_oserror *err;
    err = _swix(OS_File, _INR(0, 1)|_OUT(6), 20, filename, &type);
    if (err)
        return -1;
    return type;
}

int is_escape_pressed(void)
{
    _kernel_oserror *err;
#ifdef __riscos64
    uint32_t flags;
    err = _swix(OS_ReadEscapeState, _OUT(0), &flags);
    if (err)
        return 1;
    return flags ? 1 : 0;
#else
    uint32_t flags;
    err = _swix(OS_ReadEscapeState, _OUT(_FLAGS), &flags);
    if (err)
        return 1;
    return (flags & _C) ? 1 : 0;
#endif
}

void clear_escape(void)
{
    _swix(OS_Byte, _IN(0), 124); /* Clear escape state */
}

int file_read_block(data_accessor_t *handle, uint32_t address, uint8_t *data, int size)
{
    file_accessor_t *file = (file_accessor_t *)handle;
    uint32_t file_ptr = address - file->baseaddr;
    int read;

    if (file->current_ptr != file_ptr)
    {
        fseek(file->f, file_ptr, SEEK_SET);
        file->current_ptr = file_ptr;
    }
    read = fread(data, 1, size, file->f);
    file->current_ptr += read;

    return read;
}

int memory_read_block(data_accessor_t *handle, uint32_t address, uint8_t *data, int size)
{
    memory_accessor_t *mem = (memory_accessor_t *)handle;

    memcpy(data, (void*)address, size);
    return size;
}



/*************************************************** Gerph *********
 Function:      disassemble_stuff
 Description:   Disassemble some data through the accessor and print to the screen.
 Parameters:    accessor -> the data accessor for this object to dump
                thumb = 1 if we're disassembling thumb
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
                annotator-> function to provide more annotation for the line,
                            or NULL for none
 Returns:       error code
 ******************************************************************/
disassemble_error_t disassemble_stuff(data_accessor_t *accessor, int thumb,
                                      uint32_t start, uint32_t end,
                                      annotator_f annotator)
{
    /* We write out out disassembly as:
            ADDR : WORD : text : disassembly[ ; annotation]
     */
    uint32_t word = 0;
    uint32_t address = 0;

    if (start < address)
    {
        start = address;
    }
    if (end < address)
    {
        goto exit;
    }

    if (start != address)
    {
        address = start;
    }

    while (address < end)
    {
        int instsize = thumb ? 2 : 4;
        if (accessor->read_block(accessor, address, (uint8_t*)&word, instsize) != instsize)
            break;

        printf("%08lx : ", address);
        if (thumb)
            printf("%04lx : ", word);
        else
            printf("%08lx : ", word);

        /* Write out the textual form of the word */
        {
            int i;
            for (i=0; i<instsize; i++)
            {
                char value = (char)(word >> (8*i)) & 0xFF;
                if (value < 32)
                    value = '.';
                else if (value == 127)
                    value = '.';
                printf("%c", value);
            }
        }
        printf(" : ");

        {
            const char *dis = disassemble_word(word, address, thumb);
            printf("%s", dis);
            if (annotator)
            {
                const char *annotation = annotator(address, (uint8_t*)&word, instsize);
                if (annotation)
                    printf("  ; %s", annotation);
            }
            printf("\n");
        }

        address += instsize;

        if (is_escape_pressed())
        {
            clear_escape();
            break;
        }
    }

exit:
    return diserror_none;
}


/*************************************************** Gerph *********
 Function:      dump_stuff
 Description:   Dump some data through the accessor and print to the screen.
 Parameters:    accessor -> the data accessor for this object to dump
                data_width = 1 or 4
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
 Returns:       error code
 ******************************************************************/
disassemble_error_t dump_stuff(data_accessor_t *accessor, int data_width,
                               uint32_t start, uint32_t end)
{
    /* We write out out disassembly as:
            ADDR : WORD WORD WORD WORD : text
            ADDR : BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB : text
     */
    uint32_t address = 0;

    if (start < address)
    {
        start = address;
    }
    if (end < address)
    {
        goto exit;
    }

    if (start != address)
    {
        address = start;
    }

    while (address < end)
    {
        int offset;
        int row_size = 16;
        uint8_t data[16];
        int data_read;
        data_read = accessor->read_block(accessor, address, (uint8_t*)&data, row_size);
        if (data_read == 0)
            break;

        printf("%08lx : ", address);
        for (offset=0; offset < row_size; offset+=data_width)
        {
            if (offset + data_width > data_read)
            {
                printf("%*s ", data_width * 2, "");
            }
            else
            {
                switch (data_width)
                {
                    case 2:
                        {
                            uint16_t *itemdata = (uint16_t*)(&data[offset]);
                            printf("%04x ", *itemdata);
                        }
                        break;

                    default:
                    case 1:
                        {
                            uint8_t *itemdata = (uint8_t*)(&data[offset]);
                            printf("%02x ", *itemdata);
                        }
                        break;

                    case 4:
                        {
                            uint32_t *itemdata = (uint32_t*)(&data[offset]);
                            printf("%08lx ", *itemdata);
                        }
                        break;
                }
            }
        }
        printf(": ");

        /* Write out the textual form of the word */
        for (offset=0; offset<row_size; offset++)
        {
            if (offset > data_read)
            {
                printf(" ");
            }
            else
            {
                char value = data[offset];
                if (value < 32)
                    value = '.';
                else if (value == 127)
                    value = '.';
                printf("%c", value);
            }
        }

        printf("\n");

        address += row_size;

        if (is_escape_pressed())
        {
            clear_escape();
            break;
        }
    }

exit:
    return diserror_none;
}


/*************************************************** Gerph *********
 Function:      create_file_accessor
 Description:   Creates a file accessor for the given file, or returns an error.
 Parameters:    file-> the accessor to populate
                startp-> the start address to access (or NULL to ignore)
                endp-> the end address to access (or NULL it ignore)
 Returns:       error number, or 0 if none.
 ******************************************************************/
disassemble_error_t create_file_accessor(file_accessor_t *file,
                                         const char *filename,
                                         uint32_t *startp, uint32_t *endp)
{
    uint32_t address;
    FILE *f;
    f = fopen(filename, "rb");
    if (f == NULL)
        return diserror_file_not_found;

    address = 0;
    if (strstr(filename, ",ff8") != NULL ||
        get_filetype(filename) == 0xFF8)
        address = 0x8000;

    file->f = f;
    file->data.read_block = file_read_block;
    file->baseaddr = address;

    /* Find the file length */
    fseek(f, 0, SEEK_END);
    file->filesize = ftell(f);
    fseek(f, 0, SEEK_SET);
    file->current_ptr = 0;

    if (endp != NULL &&
        file->baseaddr + *endp > file->filesize)
        *endp = file->filesize - file->baseaddr;

    if (startp != NULL &&
        file->baseaddr + *startp > file->filesize)
        *startp = file->filesize - file->baseaddr;

    return diserror_none;
}


/*************************************************** Gerph *********
 Function:      disassemble_file
 Description:   Disassemble a file and print to the screen.
 Parameters:    filename-> the file to disassemble
                thumb = 1 if we're disassembling thumb
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
 Returns:       error code
 ******************************************************************/
disassemble_error_t disassemble_file(const char *filename, int thumb,
                                     uint32_t start, uint32_t end)
{
    disassemble_error_t err;
    file_accessor_t file;

    err = create_file_accessor(&file, filename, &start, &end);
    if (err)
        return err;

    err = disassemble_stuff((data_accessor_t*)&file, thumb, start, end, NULL);

    fclose(file.f);
    return err;
}


/*************************************************** Gerph *********
 Function:      create_memory_accessor
 Description:   Initialise a structure that allows access to memory.
 Parameters:    accessor-> the accessor to initialise
 Returns:       none
 ******************************************************************/
void create_memory_accessor(memory_accessor_t *mem)
{
    mem->data.read_block = memory_read_block;
}

/*************************************************** Gerph *********
 Function:      disassemble_memory
 Description:   Disassemble some memory and print to the screen.
 Parameters:    thumb = 1 if we're disassembling thumb
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
                annotator-> function to provide more annotation for the line,
                            or NULL for none
 Returns:       error code
 ******************************************************************/
disassemble_error_t disassemble_memory(int thumb,
                                       uint32_t start, uint32_t end,
                                       annotator_f annotator)
{
    disassemble_error_t err;
    memory_accessor_t mem;

    create_memory_accessor(&mem);

    err = disassemble_stuff((data_accessor_t*)&mem, thumb, start, end,
                            annotator);
    return err;
}



/*************************************************** Gerph *********
 Function:      dump_file
 Description:   Dump a file and print to the screen.
 Parameters:    filename-> the file to disassemble
                data_width = width of each block (1, 2 or 4 bytes)
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
 Returns:       error code
 ******************************************************************/
disassemble_error_t dump_file(const char *filename, int data_width,
                              uint32_t start, uint32_t end)
{
    disassemble_error_t err;
    file_accessor_t file;

    err = create_file_accessor(&file, filename, &start, &end);
    if (err)
        return err;

    err = dump_stuff((data_accessor_t*)&file, data_width, start, end);

    fclose(file.f);
    return err;
}

/*************************************************** Gerph *********
 Function:      dump_memory
 Description:   Dump some memory and print to the screen.
 Parameters:    data_width = width of each block (1, 2 or 4 bytes)
                start = start address
                end = end address (or 0xFFFFFFFF for entire file)
 Returns:       none
 ******************************************************************/
void dump_memory(int data_width,
                 uint32_t start, uint32_t end)
{
    memory_accessor_t mem;

    create_memory_accessor(&mem);

    dump_stuff((data_accessor_t*)&mem, data_width, start, end);
}
